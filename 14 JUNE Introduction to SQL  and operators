-- Creating and Using Database
CREATE DATABASE school;
USE school;

-- Creating Tables
-- Creating 'students' table with basic columns
CREATE TABLE students (
    student_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    age INT,
    address VARCHAR(100)
);

-- Creating 'courses' table
CREATE TABLE courses (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(50) NOT NULL,
    instructor VARCHAR(50)
);

-- Creating 'enrollments' table with foreign key references to 'students' and 'courses'
CREATE TABLE enrollments (
    enrollment_id INT PRIMARY KEY,
    student_id INT,
    course_id INT,
    final_grade CHAR(1),
    FOREIGN KEY(student_id) REFERENCES students(student_id),
    FOREIGN KEY(course_id) REFERENCES courses(course_id)
);

-- Modifying Tables
-- Adding a column to 'students' table
ALTER TABLE students
ADD phone VARCHAR(15);

-- Deleting a column from 'students' table
ALTER TABLE students
DROP COLUMN phone;

-- Renaming a column in 'enrollments' table
ALTER TABLE enrollments
RENAME COLUMN grade TO final_grade;

-- Inserting Data
-- Inserting data into 'students' table
INSERT INTO students (student_id, name, age, address) VALUES
(1, 'Alice Johnson', 20, '123 Main St'),
(2, 'Bob Smith', 22, '456 Maple Ave');

-- Inserting data into 'courses' table
INSERT INTO courses (course_id, course_name, instructor) VALUES
(101, 'Math 101', 'Dr. Adams'),
(102, 'History 101', 'Prof. Brown');

-- Inserting data into 'enrollments' table
INSERT INTO enrollments (enrollment_id, student_id, course_id, final_grade) VALUES
(1, 1, 101, 'A'),
(2, 2, 102, 'B');

-- SELECT Statements with Conditions
-- Selecting students older than 20
SELECT * FROM students WHERE age > 20;

-- Selecting courses taught by 'Dr. Adams'
SELECT * FROM courses WHERE instructor = 'Dr. Adams';

-- Selecting enrollments with final grade 'A'
SELECT * FROM enrollments WHERE final_grade = 'A';

-- Updating Records
-- Updating 'students' table
UPDATE students
SET name = 'Alice Johnson', address = '789 Oak St'
WHERE student_id = 1;

-- Deleting Records
-- Deleting a specific enrollment
DELETE FROM enrollments WHERE enrollment_id = 2;

-- Using AND, OR, and NOT Operators in SELECT Queries
-- Selecting students older than 18 and living on a street
SELECT * FROM students WHERE age > 18 AND address LIKE '%St';

-- Selecting courses by 'Prof. Brown' or 'Math 101'
SELECT * FROM courses WHERE instructor = 'Prof. Brown' OR course_name = 'Math 101';

-- Selecting enrollments not with grade 'C'
SELECT * FROM enrollments WHERE NOT (final_grade = 'C');

-- Creating Tables with Constraints
-- Creating 'teachers' table with unique email constraint
CREATE TABLE teachers (
    teacher_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL
);

-- Creating 'departments' table with foreign key constraint referencing 'teachers'
CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(50) NOT NULL,
    head_id INT,
    FOREIGN KEY(head_id) REFERENCES teachers(teacher_id)
);

-- Inserting Data with Constraints
-- Inserting into 'teachers' table
INSERT INTO teachers (teacher_id, name, email)
VALUES (1, 'Dr. Adams', 'adams@example.com');

-- Using SELECT Query with Conditions
-- Selecting students older than 18
SELECT * 
FROM students 
WHERE age > 18;

-- Updating a Record
-- Updating the age of a student
UPDATE students
SET age = 21
WHERE student_id = 1;

-- Deleting Records with a Condition
-- Deleting students younger than 20
DELETE FROM students 
WHERE age < 20;





-- Creating a new database for testing operators
CREATE DATABASE operators_test;

-- Using the created database
USE operators_test;

-- Creating a sample table to demonstrate operators
CREATE TABLE items (
    item_id INT PRIMARY KEY,
    price DECIMAL(10, 2),
    name VARCHAR(50)
);

-- Inserting data into the sample table
INSERT INTO items (item_id, price, name) VALUES
(1, 25.00, 'pen'),
(2, 50.00, 'notebook'),
(3, 75.00, 'backpack');

-- Arithmetic Operators
-- Adding values
SELECT price + 5.00 AS addition_result FROM items;

-- Subtracting values
SELECT price - 5.00 AS subtraction_result FROM items;

-- Multiplying values
SELECT price * 2 AS multiplication_result FROM items;

-- Dividing values
SELECT price / 2 AS division_result FROM items;

-- Modulus operation
SELECT price % 3 AS modulus_result FROM items;

-- Comparison Operators
-- Equal to
SELECT price = 50.00 AS is_equal FROM items;

-- Not equal to
SELECT price != 50.00 AS is_not_equal FROM items;

-- Greater than
SELECT price > 30.00 AS is_greater FROM items;

-- Less than
SELECT price < 60.00 AS is_less FROM items;

-- Greater than or equal to
SELECT price >= 50.00 AS is_greater_or_equal FROM items;

-- Less than or equal to
SELECT price <= 50.00 AS is_less_or_equal FROM items;

-- Logical Operators
-- AND operator
SELECT (price > 20.00 AND price < 70.00) AS and_result FROM items;

-- OR operator
SELECT (price < 30.00 OR price > 60.00) AS or_result FROM items;

-- NOT operator
SELECT NOT (price = 50.00) AS not_result FROM items;

-- Bitwise Operators (using constants for clarity)
-- AND operation
SELECT 12 & 5 AS bitwise_and;

-- OR operation
SELECT 12 | 5 AS bitwise_or;

-- XOR operation
SELECT 12 ^ 5 AS bitwise_xor;

-- NOT operation
SELECT ~12 AS bitwise_not;

-- Left shift operation
SELECT 12 << 2 AS left_shift;

-- Right shift operation
SELECT 12 >> 2 AS right_shift;

-- String Concatenation
-- Concatenating two strings
SELECT 'Hello' || ' SQL' AS concatenated_string;

-- IN Operator
-- Checking if a price is in a list
SELECT price IN (25.00, 50.00, 75.00) AS in_list FROM items;

-- Checking if a name is in a list
SELECT name IN ('pen', 'notebook', 'eraser') AS name_in_list FROM items;

-- BETWEEN Operator
-- Checking if a price is between two numbers
SELECT price BETWEEN 30.00 AND 70.00 AS between_prices FROM items;

-- Checking if a name is between two strings
SELECT name BETWEEN 'a' AND 'm' AS between_strings FROM items;

-- LIKE Operator
-- Matching patterns
SELECT name LIKE 'p%' AS starts_with_p FROM items;
SELECT name LIKE '%k' AS ends_with_k FROM items;
SELECT name LIKE 'n_t%' AS pattern_match FROM items;

-- IS NULL Operator
-- Creating a sample table with NULL values to demonstrate IS NULL and IS NOT NULL
CREATE TABLE inventory (
    item_id INT PRIMARY KEY,
    quantity INT
);

-- Inserting data into the inventory table
INSERT INTO inventory (item_id, quantity) VALUES
(1, 10),
(2, NULL);

-- Checking for NULL values
SELECT quantity IS NULL AS is_null FROM inventory;
SELECT quantity IS NOT NULL AS is_not_null FROM inventory;

-- Clean up: Dropping the created database
DROP DATABASE operators_test;
