#JOINS
#-> As the word suggests, Joins are used to combine two or more tables to get specific data/information
#-> Join is mainly of 6 types:
#1. Inner Join
#2. Left Outer Join
#3. Right Outer Join
#4. Full Outer Join
#5. Self Join
#6. Cross Join
-- Creating database
CREATE DATABASE amazon;

-- Using database
USE amazon;

-- Creating table Products
CREATE TABLE products (
    pid INT(3) PRIMARY KEY,
    pname VARCHAR(50) NOT NULL,
    price INT(10) NOT NULL,
    stock INT(5),
    location VARCHAR(30) CHECK(location IN ('Mumbai', 'Delhi'))
);

-- Creating table Customer
CREATE TABLE customer (
    cid INT(3) PRIMARY KEY,
    cname VARCHAR(30) NOT NULL,
    age INT(3),
    addr VARCHAR(50)
);

-- Creating table Orders
CREATE TABLE orders (
    oid INT(3) PRIMARY KEY,
    cid INT(3),
    pid INT(3),
    amt INT(10) NOT NULL,
    FOREIGN KEY(cid) REFERENCES customer(cid),
    FOREIGN KEY(pid) REFERENCES products(pid)
);

-- Creating table Payment
CREATE TABLE payment (
    pay_id INT(3) PRIMARY KEY,
    oid INT(3),
    amount INT(10) NOT NULL,
    mode VARCHAR(30) CHECK(mode IN('upi', 'credit', 'debit')),
    status VARCHAR(30),
    FOREIGN KEY(oid) REFERENCES orders(oid)
);

-- Creating table Employee
CREATE TABLE employee (
    eid INT(4) PRIMARY KEY,
    ename VARCHAR(40) NOT NULL,
    phone_no INT(10) NOT NULL,
    department VARCHAR(40) NOT NULL,
    manager_id INT(4)
);

-- Inserting values into products table
INSERT INTO products VALUES
(1, 'HP Laptop', 50000, 15, 'Mumbai'),
(2, 'Realme Mobile', 20000, 30, 'Delhi'),
(3, 'Boat earpods', 3000, 50, 'Delhi'),
(4, 'Levono Laptop', 40000, 15, 'Mumbai'),
(5, 'Charger', 1000, 0, 'Mumbai'),
(6, 'Mac Book', 78000, 6, 'Delhi'),
(7, 'JBL speaker', 6000, 2, 'Delhi');

-- Inserting values into customer table
INSERT INTO customer VALUES
(101, 'Ravi', 30, 'fdslfjl'),
(102, 'Rahul', 25, 'fdslfjl'),
(103, 'Simran', 32, 'fdslfjl'),
(104, 'Purvesh', 28, 'fdslfjl'),
(105, 'Sanjana', 22, 'fdslfjl');

-- Inserting values into orders table
INSERT INTO orders VALUES
(10001, 102, 3, 2700),
(10002, 104, 2, 18000),
(10003, 105, 5, 900),
(10004, 101, 1, 46000);

-- Inserting values into payment table
INSERT INTO payment VALUES
(1, 10001, 2700, 'upi', 'completed'),
(2, 10002, 18000, 'credit', 'completed'),
(3, 10003, 900, 'debit', 'in process');

-- Inserting values into employee table
INSERT INTO employee VALUES
(401, 'Rohan', 364832549, 'Analysis', 404),
(402, 'Rahul', 782654123, 'Delivery', 406),
(403, 'Shyam', 856471235, 'Delivery', 402),
(404, 'Neha', 724863287, 'Sales', 402),
(405, 'Sanjana', 125478954, 'HR', 404),
(406, 'Sanjay', 956478535, 'Tech', NULL);

-- Displaying details of all tables
SELECT * FROM products;
SELECT * FROM customer;
SELECT * FROM orders;
SELECT * FROM payment;
SELECT * FROM employee;

-- Joins Examples
-- 1. Inner Join
SELECT customer.cid, cname, orders.oid 
FROM orders 
INNER JOIN customer ON orders.cid = customer.cid;

SELECT customer.cid, cname, products.pid, pname, oid 
FROM orders
INNER JOIN products ON orders.pid = products.pid
INNER JOIN customer ON orders.cid = customer.cid;

-- 2. Left Join
SELECT products.pid, pname, amt, orders.oid 
FROM products
LEFT JOIN orders ON orders.pid = products.pid;

-- 3. Right Join
SELECT * FROM payment 
RIGHT JOIN orders ON orders.oid = payment.oid;

-- 4. Full Join (using UNION of left and right joins)
SELECT orders.oid, products.pid, pname, amt, price, stock, location 
FROM orders
LEFT JOIN products ON orders.pid = products.pid
UNION
SELECT orders.oid, products.pid, pname, amt, price, stock, location 
FROM orders
RIGHT JOIN products ON orders.pid = products.pid;

-- 5. Self Join
SELECT e1.ename AS Employee, e2.ename AS Manager 
FROM employee e1
INNER JOIN employee e2 ON e1.manager_id = e2.eid;

-- 6. Cross Join
SELECT customer.cid, cname, orders.oid, amt 
FROM customer
CROSS JOIN orders 
WHERE customer.cid = orders.cid AND amt > 3000;

-- Practice Questions
-- Q1. Display details of all orders which were delivered from "Mumbai"
SELECT * 
FROM orders 
LEFT JOIN products ON orders.pid = products.pid
WHERE location = 'Mumbai';

-- Q2. Display details of all orders whose payment was made through "UPI"
SELECT * 
FROM orders
RIGHT JOIN payment ON orders.oid = payment.oid
WHERE mode = 'upi';

-- Q3. Display oid, amt, cname, payment mode of orders made by people below 30 years
SELECT orders.oid, cname, amt, mode 
FROM orders
INNER JOIN payment ON orders.oid = payment.oid
INNER JOIN customer ON orders.cid = customer.cid
WHERE age < 30;

-- Q4. Display oid, amt, cname, payment mode of orders made by people below 30 years and payment through "Credit"
SELECT orders.oid, cname, amt, mode 
FROM orders
INNER JOIN payment ON orders.oid = payment.oid
INNER JOIN customer ON orders.cid = customer.cid
WHERE age < 30 AND mode = 'credit';

-- Q5. Display oid, amount, cname, pname, location of orders with payment pending or in process
SELECT orders.oid, cname, pname, amount, status, location 
FROM orders
CROSS JOIN products ON orders.pid = products.pid
CROSS JOIN customer ON orders.cid = customer.cid
CROSS JOIN payment ON orders.oid = payment.oid
WHERE status IN ('in process', 'pending');

-- Q6. Display oid, amount, cname, pname, location of orders
SELECT orders.cid, cname, pname 
FROM orders
INNER JOIN customer ON orders.cid = customer.cid
INNER JOIN products ON orders.pid = products.pid;






