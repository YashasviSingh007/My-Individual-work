# Class Definition and Inheritance

class car:
    {body}

class toyotacar(car):
    {body}

class car:
    @staticmethod
    def start():
        print("car stated")
    
    @staticmethod    
    def stop():
        print("car stopped")

class toyotacar(car):
    def __init__(self, name):
        self.name = name

car1 = toyotacar("Fortuner")
car2 = toyotacar("prius")

print(car1.name)
print(car2.start())

class car:
    @staticmethod
    def start():
        print("car started")
    
    @staticmethod   
    def stop():
        print("car stopped")

class toyotacar(car):
    def __init__(self, brand):
        self.brand = brand

class Fortuner(toyotacar):
    def __init__(self, type):
        self.type = type

car1 = Fortuner("diesel")
car1.start()

# Multiple Inheritance

class Animal:
    def speak(self):
        print("Animal speaks")

class Flyable:
    def fly(self):
        print("I can fly")

class Bird(Animal, Flyable):
    def chirp(self):
        print("Bird chirps")

# Creating an instance of Bird
sparrow = Bird()

# Accessing methods from all parent classes
sparrow.speak()
sparrow.fly()
sparrow.chirp()

# Method Overriding

class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        print(f"{self.name} makes a sound.")

class Dog(Animal):
    def speak(self):
        print(f"{self.name} barks: Woof!")

    def fetch(self):
        print(f"{self.name} fetches the ball.")

class Cat(Animal):
    def speak(self):
        print(f"{self.name} meows: Meow!")

    def scratch(self):
        print(f"{self.name} scratches the furniture.")

# Creating instances
pet1 = Dog("Buddy")
pet2 = Cat("Whiskers")

# Using methods
pet1.speak()  # Output: Buddy barks: Woof!
pet1.fetch()  # Output: Buddy fetches the ball.

pet2.speak()  # Output: Whiskers meows: Meow!
pet2.scratch()  # Output: Whiskers scratches the furniture.

# Multiple Inheritance with Engine and Vehicle

class Vehicle:
    def __init__(self, brand):
        self.brand = brand

    def display_brand(self):
        print(f"Brand: {self.brand}")

class Engine:
    def start_engine(self):
        print("Engine started")

class Car(Vehicle):
    def drive(self):
        print("Car is driving")

class Boat(Vehicle):

