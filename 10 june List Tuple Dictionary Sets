# List Operations

# Initialization
fruits = ["apple", "banana", "cherry"]
print(f"Initial list: {fruits}")

# Append
fruits.append("orange")
print(f"Append: {fruits}")

# Insert
fruits.insert(1, "grape")
print(f"Insert: {fruits}")

# Remove
fruits.remove("banana")
print(f"Remove: {fruits}")

# Copy
# Shallow Copy
fruits_shallow_copy = fruits.copy()
fruits_shallow_copy[0] = "lemon"
print(f"Shallow Copy: {fruits_shallow_copy}, Original: {fruits}")

# Deep Copy
import copy
fruits_deep_copy = copy.deepcopy(fruits)
fruits_deep_copy[0] = "kiwi"
print(f"Deep Copy: {fruits_deep_copy}, Original: {fruits}")

# Count
fruits.append("apple")
apple_count = fruits.count("apple")
print(f"Count of 'apple': {apple_count}")

# Extend
more_fruits = ["pear", "pineapple"]
fruits.extend(more_fruits)
print(f"Extend: {fruits}")

# Index
apple_index = fruits.index("apple")
print(f"Index of 'apple': {apple_index}")

# Sort
fruits.sort()
print(f"Sort: {fruits}")

# Reverse
fruits.reverse()
print(f"Reverse: {fruits}")

# Clear
fruits.clear()
print(f"Clear: {fruits}")

# Pop
removed_fruit = more_fruits.pop()
print(f"Pop: {removed_fruit}, Remaining: {more_fruits}")

# List Comprehension
squares = [x ** 2 for x in range(10)]
print(f"Squares: {squares}")

# General Syntax: new_list = [expression for item in iterable if condition]

# Functional Programming with Lists

# Sum using reduce
from functools import reduce
numbers = [1, 2, 3, 4, 5]
total_sum = reduce(lambda x, y: x + y, numbers)
print(f"Sum of numbers using reduce: {total_sum}")

# Cubes using map
cubes = list(map(lambda x: x ** 3, numbers))
print(f"Cubes of numbers using map: {cubes}")

# Filter even numbers
even_only = list(filter(lambda x: x % 2 == 0, numbers))
print(f"Even numbers using filter: {even_only}")

# Zip names and scores
names = ["Alice", "Bob", "Charlie"]
scores = [95, 87, 92]
name_score_pairs = list(zip(names, scores))
print(f"Zipped names and scores: {name_score_pairs}")







# Tuples in Python

# Tuples are written with round brackets
y = ("apple", "banana", "cherry")
print(y)

# Properties of Tuples:
# - Ordered
# - Unchangeable
# - Allow duplicate values
# - Indexed (first item has index [0])

# Tuples allow duplicate values
x = ("apple", "banana", "cherry", "apple", "cherry")
print(x)

# Tuple length
thistuple = tuple(("apple", "banana", "cherry"))
print(len(thistuple))

# Tuples can store different datatypes
tuple1 = ("abc", 34, True, 40, "male")
print(tuple1)

# Create a tuple using the tuple() constructor
q = tuple(("apple", "banana", "cherry"))
print(q)

# Access tuple items
w = ("apple", "banana", "cherry")
print(w[1])  # Output: banana

# Slicing tuples
e = ("apple", "banana", "cherry", "orange", "kiwi", "melon", "mango")
print(e[2:5])  # Output: cherry, orange, kiwi

# Slicing from the beginning to a specific index (excluding the end index)
t = ("apple", "banana", "cherry", "orange", "kiwi", "melon", "mango")
print(t[:4])  # Output: apple, banana, cherry, orange

# Negative indexing
le = ("apple", "banana", "cherry", "orange", "kiwi", "melon", "mango")
print(le[-4:-1])  # Output: orange, kiwi, melon

# Compare List and Tuple for Immutability
numbers_list = [1, 2, 3, 4, 5]
numbers_tuple = (6, 7, 8, 9)
# numbers_tuple[0] = 10  # This will raise an error because tuples are immutable

# Tuple length
list_length = len(numbers_list)
tuple_length = len(numbers_tuple)
print("Length of list:", list_length)  # Output: 5
print("Length of tuple:", tuple_length)  # Output: 4

# Minimum element in a list and tuple
fruits_list = ["apple", "banana", "cherry"]
fruits_tuple = ("mango", "kiwi", "grape")
smallest_fruit_list = min(fruits_list)
smallest_fruit_tuple = min(fruits_tuple)
print("Smallest fruit in list:", smallest_fruit_list)  # Output: apple
print("Smallest fruit in tuple:", smallest_fruit_tuple)  # Output: grape

# Maximum element in a list and tuple
numbers_list = [1, 5, 2, 8]
numbers_tuple = (3, 7, 9, 0)
largest_number_list = max(numbers_list)
largest_number_tuple = max(numbers_tuple)
print("Largest number in list:", largest_number_list)  # Output: 8
print("Largest number in tuple:", largest_number_tuple)  # Output: 9

# Sort list in-place (tuples cannot be sorted as they are immutable)
# mixed_list = ["apple", 3, 9.5, True]
# mixed_list.sort()
# print("Sorted list:", mixed_list)  # Output: [3, 9.5, True, 'apple'] (depending on Python version)

# Sum of elements in a list and tuple (assumes numeric data)
numbers_list = [4, 7, 2, 11]
numbers_tuple = (6, 3, 8, 1)
list_sum = sum(numbers_list)
tuple_sum = sum(numbers_tuple)
print("Sum of list elements:", list_sum)  # Output: 24
print("Sum of tuple elements:", tuple_sum)  # Output: 18






# dictionary_operations.py

# 1. Dictionary Creation and Basic Operations

# Creating a dictionary
person = {'name': 'Bob', 'age': 35, 'city': 'Chicago'}

# Accessing values
print(person['name'])  # Output: Bob

# Adding a new key-value pair
person['email'] = 'bob@example.com'
print(person)

# Removing a key-value pair
del person['age']
print(person)

# 2. Dictionary Methods

# keys(): Returns a view object containing the dictionary's keys
keys = person.keys()
print(keys)  # Output: dict_keys(['name', 'city', 'email'])

# values(): Returns a view object containing the dictionary's values
values = person.values()
print(values)  # Output: dict_values(['Bob', 'Chicago', 'bob@example.com'])

# items(): Returns a view object containing the dictionary's key-value pairs
items = person.items()
print(items)  # Output: dict_items([('name', 'Bob'), ('city', 'Chicago'), ('email', 'bob@example.com')])

# get(key, default=None): Returns the value for the specified key if the key is in the dictionary
print(person.get('name'))  # Output: Bob
print(person.get('phone', 'Not Available'))  # Output: Not Available

# pop(key, default=None): Removes the key-value pair from the dictionary and returns the value
removed_value = person.pop('email', 'Not Found')
print(removed_value)  # Output: bob@example.com
print(person)  # Output: {'name': 'Bob', 'city': 'Chicago'}

# 3. Dictionary Comprehension

# Creating a dictionary with dictionary comprehension
squares = {x: x*x for x in range(6)}
print(squares)  # Output: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

# 4. Removing Duplicate Values from a Dictionary

def remove_duplicate_values(dictionary):
    unique_values = {}
    for key, value in dictionary.items():
        if value not in unique_values.values():
            unique_values[key] = value
    return unique_values

original_dict = {'a': 1, 'b': 2, 'c': 1, 'd': 3, 'e': 2}
unique_dict = remove_duplicate_values(original_dict)
print(unique_dict)  # Output: {'a': 1, 'b': 2, 'd': 3}

# 5. Group Data by Key

def group_by_key(data, key):
    grouped = {}
    for item in data:
        value = item[key]
        if value in grouped:
            grouped[value].append(item)
        else:
            grouped[value] = [item]
    return grouped

data = [
    {'name': 'Alice', 'age': 25, 'city': 'New York'},
    {'name': 'Bob', 'age': 30, 'city': 'Chicago'},
    {'name': 'Charlie', 'age': 35, 'city': 'New York'},
    {'name': 'David', 'age': 40, 'city': 'Chicago'}
]

grouped_by_city = group_by_key(data, 'city')
print(grouped_by_city)  # Output: {'New York': [...], 'Chicago': [...]}





# sets_operations.py

# 1. Introduction to Sets

# Creating a set
fruits = {"apple", "banana", "cherry"}
print(fruits)  # Output: {'cherry', 'banana', 'apple'}

# Sets automatically remove duplicates
numbers = {1, 2, 2, 3, 4, 4, 5}
print(numbers)  # Output: {1, 2, 3, 4, 5}

# 2. Basic Set Operations

# Adding elements to a set
fruits.add("orange")
print(fruits)  # Output: {'cherry', 'banana', 'apple', 'orange'}

# Removing elements from a set
fruits.remove("banana")
print(fruits)  # Output: {'cherry', 'apple', 'orange'}

# 3. Set Operations

# Union (|): Combines all unique elements from two sets
set1 = {1, 2, 3}
set2 = {3, 4, 5}
union_set = set1 | set2
print("Union:", union_set)  # Output: {1, 2, 3, 4, 5}

# Intersection (&): Finds common elements between two sets
intersection_set = set1 & set2
print("Intersection:", intersection_set)  # Output: {3}

# Difference (-): Finds elements present in the first set but not in the second
difference_set = set1 - set2
print("Difference:", difference_set)  # Output: {1, 2}

# Symmetric Difference (^): Finds elements in either set, but not in both
symmetric_difference_set = set1 ^ set2
print("Symmetric Difference:", symmetric_difference_set)  # Output: {1, 2, 4, 5}

# 4. Practical Example with Union

grocery_list = {"apples", "bananas", "milk", "bread"}
household_list = {"detergent", "paper towels", "milk", "bread"}

shopping_list = grocery_list | household_list
print("Shopping list:", shopping_list)
# Output: {'milk', 'bread', 'bananas', 'detergent', 'paper towels', 'apples'}

# 5. Other Set Operations

# Checking membership
print("apple" in fruits)  # Output: True

# Subset and Superset
setA = {1, 2, 3}
setB = {1, 2, 3, 4, 5}
print(setA.issubset(setB))  # Output: True
print(setB.issuperset(setA))  # Output: True

# 6. Advanced Set Operations

# Power Set: Generates all possible subsets of a set
def power_set(s):
    if len(s) == 0:
        return {frozenset()}
    element = s.pop()
    subsets = power_set(s)
    return subsets.union({subset.union({element}) for subset in subsets})

my_set = {1, 2, 3}
print(power_set(my_set))
# Output: {frozenset(), frozenset({1}), frozenset({2}), frozenset({3}), frozenset({1, 2}), frozenset({1, 3}), frozenset({2, 3}), frozenset({1, 2, 3})}

# Frozen Set: An immutable version of a set
frozen_set = frozenset(my_set)
print(frozen_set)  # Output: frozenset({1, 2, 3})

# 7. Set Algebra (using SymPy's BooleanAlgebra


